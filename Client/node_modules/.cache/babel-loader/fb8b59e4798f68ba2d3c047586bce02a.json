{"ast":null,"code":"var _jsxFileName = \"/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js\";\nimport React from 'react';\nimport { plantUpdated } from './plantsSlice';\nimport planty from '../../media/plant.png';\nimport { useDispatch } from 'react-redux';\nlet clearTimeoutVariable;\nexport default function Plants({\n  plant\n}) {\n  const dispatch = useDispatch();\n\n  const buttonClicks = (time, status, name) => {\n    const time_subtraction = Date.now() - time; // do an enumerate for the status options\n\n    if (time_subtraction < 30000 && status === 'Just Watered') {\n      return null;\n    } else if (status === 'Must Water' || status === 'Water') {\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: 'Watering',\n        timestamp: Date.now()\n      }));\n\n      const tenSecondInterval = () => {\n        dispatch(plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: 'Just Watered',\n          timestamp: Date.now()\n        }));\n\n        const toSetState = () => {\n          dispatch(plantUpdated({\n            id: plant.id,\n            plantName: name,\n            plantStatus: 'Water',\n            timestamp: Date.now()\n          }));\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === 'Watering') {\n      clearTimeout(clearTimeoutVariable);\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: 'Just Watered',\n        timestamp: Date.now()\n      }));\n\n      const toSetState = () => {\n        dispatch(plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: 'Water',\n          timestamp: Date.now()\n        }));\n      };\n\n      setTimeout(toSetState, 30000);\n    } else {\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: 'Watering',\n        timestamp: Date.now()\n      }));\n    }\n  };\n\n  const buttonStyle = status => {\n    if (status === 'Water') {\n      return 'pink';\n    } else if (status === 'Watering') {\n      return 'purple';\n    } else if (status === 'Must Water') {\n      return 'red';\n    } else if (status === 'Just Watered') {\n      return 'green';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: planty,\n    alt: \"a plant\",\n    style: {\n      width: '100px',\n      backgroundColor: '#faf0e6',\n      borderRadius: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, plant.plantName), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: buttonStyle(plant.plantStatus),\n      borderRadius: 5,\n      border: 'none',\n      outline: 'none',\n      fontWeight: 'bold',\n      color: 'white',\n      width: '100%',\n      fontSize: '10px',\n      height: '30px'\n    },\n    onClick: () => buttonClicks(plant.timestamp, plant.plantStatus, plant.plantName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, plant.plantStatus));\n}","map":{"version":3,"sources":["/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js"],"names":["React","plantUpdated","planty","useDispatch","clearTimeoutVariable","Plants","plant","dispatch","buttonClicks","time","status","name","time_subtraction","Date","now","id","plantName","plantStatus","timestamp","tenSecondInterval","toSetState","setTimeout","clearTimeout","buttonStyle","display","flexDirection","alignItems","width","backgroundColor","borderRadius","border","outline","fontWeight","color","fontSize","height"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { plantUpdated } from './plantsSlice'\nimport planty from '../../media/plant.png'\nimport { useDispatch } from 'react-redux'\n\nlet clearTimeoutVariable\n\nexport default function Plants({ plant }) {\n  const dispatch = useDispatch()\n\n  const buttonClicks = (time, status, name) => {\n    const time_subtraction = Date.now() - time\n    // do an enumerate for the status options\n    if (time_subtraction < 30000 && status === 'Just Watered') {\n      return null\n    } else if (status === 'Must Water' || status === 'Water') {\n      dispatch(\n        plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: 'Watering',\n          timestamp: Date.now(),\n        })\n      )\n      const tenSecondInterval = () => {\n        dispatch(\n          plantUpdated({\n            id: plant.id,\n            plantName: name,\n            plantStatus: 'Just Watered',\n            timestamp: Date.now(),\n          })\n        )\n\n        const toSetState = () => {\n          dispatch(\n            plantUpdated({\n              id: plant.id,\n              plantName: name,\n              plantStatus: 'Water',\n              timestamp: Date.now(),\n            })\n          )\n        }\n\n        setTimeout(toSetState, 30000)\n      }\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000)\n    } else if (time_subtraction < 10000 && status === 'Watering') {\n      clearTimeout(clearTimeoutVariable)\n      dispatch(\n        plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: 'Just Watered',\n          timestamp: Date.now(),\n        })\n      )\n\n      const toSetState = () => {\n        dispatch(\n          plantUpdated({\n            id: plant.id,\n            plantName: name,\n            plantStatus: 'Water',\n            timestamp: Date.now(),\n          })\n        )\n      }\n      setTimeout(toSetState, 30000)\n    } else {\n      dispatch(\n        plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: 'Watering',\n          timestamp: Date.now(),\n        })\n      )\n    }\n  }\n\n  const buttonStyle = (status) => {\n    if (status === 'Water') {\n      return 'pink'\n    } else if (status === 'Watering') {\n      return 'purple'\n    } else if (status === 'Must Water') {\n      return 'red'\n    } else if (status === 'Just Watered') {\n      return 'green'\n    }\n  }\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}\n    >\n      <img\n        src={planty}\n        alt=\"a plant\"\n        style={{\n          width: '100px',\n          backgroundColor: '#faf0e6',\n          borderRadius: 10,\n        }}\n      />\n      <h3>{plant.plantName}</h3>\n      <button\n        style={{\n          backgroundColor: buttonStyle(plant.plantStatus),\n          borderRadius: 5,\n          border: 'none',\n          outline: 'none',\n          fontWeight: 'bold',\n          color: 'white',\n          width: '100%',\n          fontSize: '10px',\n          height: '30px',\n        }}\n        onClick={() =>\n          buttonClicks(plant.timestamp, plant.plantStatus, plant.plantName)\n        }\n      >\n        {plant.plantStatus}\n      </button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}