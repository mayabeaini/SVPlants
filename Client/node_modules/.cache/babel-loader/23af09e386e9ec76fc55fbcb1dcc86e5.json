{"ast":null,"code":"var _jsxFileName = \"/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js\";\nimport React, { useState } from \"react\";\nimport { plantUpdated } from './plantsSlice';\nimport planty from \"../../media/plant.png\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nlet clearTimeoutVariable;\nexport default function Plants({\n  plant\n}) {\n  const pl = useSelector(state => state.plants.find(p => p.id === plant.id));\n  const [plantName, setPlantName] = useState(plant.plantName);\n  const [plantStatus, setPlantStatus] = useState(plant.plantStatus);\n  const [timestamp, setTimestamp] = useState(plant.timestamp);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const buttonClicks = (time, id, status, name) => {\n    // const aPlant = {\n    //   plantName: \"Plant 1\",\n    //   plantStatus: \"MustWater\",\n    //   timestamp: 1234567890,\n    // };\n    // axios\n    //   .put(\"http://localhost:2238/api/SVPlantItems/1\", aPlant)\n    //   .then((response) => console.log(response));\n    const time_subtraction = Date.now() - time; // do an enumerate for the status options\n\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: \"Watering\",\n        timestamp: Date.now()\n      })); //   this.setState({\n      //     plantInfo: this.state.plantInfo.map((el) =>\n      //       el.id === id\n      //         ? {\n      //             id: el.id,\n      //             plantName: el.plantName,\n      //             timestamp: Date.now(),\n      //             plantStatus: \"Watering\",\n      //           }\n      //         : el\n      //     ),\n      //   });\n\n      const tenSecondInterval = () => {\n        dispatch(plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: \"Just Watered\",\n          timestamp: Date.now()\n        }));\n\n        const toSetState = () => {\n          dispatch(plantUpdated({\n            id: plant.id,\n            plantName: name,\n            plantStatus: \"Just Watered\",\n            timestamp: Date.now()\n          }));\n          this.setState({\n            plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n              id: el.id,\n              plantName: el.plantName,\n              timestamp: Date.now(),\n              plantStatus: \"Water\"\n            } : el)\n          });\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      this.setState({\n        plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n          id: el.id,\n          plantName: el.plantName,\n          timestamp: Date.now(),\n          plantStatus: \"Just Watered\"\n        } : el)\n      });\n\n      const toSetState = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n            id: el.id,\n            plantName: el.plantName,\n            timestamp: Date.now(),\n            plantStatus: \"Water\"\n          } : el)\n        });\n      };\n\n      setTimeout(toSetState, 30000);\n    } else {\n      this.setState({\n        plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n          id: el.id,\n          plantName: el.plantName,\n          timestamp: Date.now(),\n          plantStatus: \"Watering\"\n        } : el)\n      });\n    }\n  };\n\n  const buttonStyle = status => {\n    if (status === \"Water\") {\n      return \"pink\";\n    } else if (status === \"Watering\") {\n      return \"purple\";\n    } else if (status === \"Must Water\") {\n      return \"red\";\n    } else if (status === \"Just Watered\") {\n      return \"green\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: planty,\n    alt: \"a plant\",\n    style: {\n      width: \"100px\",\n      backgroundColor: \"#faf0e6\",\n      borderRadius: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, plant.plantName), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: buttonStyle(plant.plantStatus),\n      borderRadius: 5,\n      border: \"none\",\n      outline: \"none\",\n      fontWeight: \"bold\",\n      color: \"white\",\n      width: \"100%\",\n      fontSize: \"20px\",\n      height: \"30px\"\n    },\n    onClick: () => buttonClicks(plant.timestamp, plant.id, plant.plantStatus),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, plant.plantStatus));\n}","map":{"version":3,"sources":["/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js"],"names":["React","useState","plantUpdated","planty","useDispatch","useSelector","useHistory","clearTimeoutVariable","Plants","plant","pl","state","plants","find","p","id","plantName","setPlantName","plantStatus","setPlantStatus","timestamp","setTimestamp","dispatch","history","buttonClicks","time","status","name","time_subtraction","Date","now","tenSecondInterval","toSetState","setState","plantInfo","map","el","setTimeout","clearTimeout","buttonStyle","display","flexDirection","alignItems","width","backgroundColor","borderRadius","border","outline","fontWeight","color","fontSize","height"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { plantUpdated } from './plantsSlice'\nimport planty from \"../../media/plant.png\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\n\nlet clearTimeoutVariable\n\n\nexport default function Plants({\n  plant,\n}) {\n    const pl = useSelector(state =>\n    state.plants.find(p => p.id === plant.id)\n  )\n  const [plantName, setPlantName] = useState(plant.plantName)\n  const [plantStatus, setPlantStatus] = useState(plant.plantStatus)\n  const [timestamp, setTimestamp] = useState(plant.timestamp)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n    const buttonClicks = (time, id, status, name) => {\n            // const aPlant = {\n    //   plantName: \"Plant 1\",\n    //   plantStatus: \"MustWater\",\n    //   timestamp: 1234567890,\n    // };\n    // axios\n    //   .put(\"http://localhost:2238/api/SVPlantItems/1\", aPlant)\n    //   .then((response) => console.log(response));\n\n    const time_subtraction = Date.now() - time;\n    // do an enumerate for the status options\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n        dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Watering\", timestamp: Date.now() }))\n        //   this.setState({\n    //     plantInfo: this.state.plantInfo.map((el) =>\n    //       el.id === id\n    //         ? {\n    //             id: el.id,\n    //             plantName: el.plantName,\n    //             timestamp: Date.now(),\n    //             plantStatus: \"Watering\",\n    //           }\n    //         : el\n    //     ),\n    //   });\n      const tenSecondInterval = () => {\n        dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Just Watered\", timestamp: Date.now() }))\n\n        const toSetState = () => {\n          dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Just Watered\", timestamp: Date.now() }))\n\n          this.setState({\n            plantInfo: this.state.plantInfo.map((el) =>\n              el.id === id\n                ? {\n                    id: el.id,\n                    plantName: el.plantName,\n                    timestamp: Date.now(),\n                    plantStatus: \"Water\",\n                  }\n                : el\n            ),\n          });\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      this.setState({\n        plantInfo: this.state.plantInfo.map((el) =>\n          el.id === id\n            ? {\n                id: el.id,\n                plantName: el.plantName,\n                timestamp: Date.now(),\n                plantStatus: \"Just Watered\",\n              }\n            : el\n        ),\n      });\n\n      const toSetState = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map((el) =>\n            el.id === id\n              ? {\n                  id: el.id,\n                  plantName: el.plantName,\n                  timestamp: Date.now(),\n                  plantStatus: \"Water\",\n                }\n              : el\n          ),\n        });\n      };\n      setTimeout(toSetState, 30000);\n    } else {\n      this.setState({\n        plantInfo: this.state.plantInfo.map((el) =>\n          el.id === id\n            ? {\n                id: el.id,\n                plantName: el.plantName,\n                timestamp: Date.now(),\n                plantStatus: \"Watering\",\n              }\n            : el\n        ),\n      });\n    }\n  };\n\n  const buttonStyle = (status) => {\n    if (status === \"Water\") {\n      return \"pink\";\n    } else if (status === \"Watering\") {\n      return \"purple\";\n    } else if (status === \"Must Water\") {\n      return \"red\";\n    } else if (status === \"Just Watered\") {\n      return \"green\";\n    }\n  };\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n    >\n      <img\n        src={planty}\n        alt=\"a plant\"\n        style={{\n          width: \"100px\",\n          backgroundColor: \"#faf0e6\",\n          borderRadius: 10,\n        }}\n      />\n      <h3>{plant.plantName}</h3>\n      <button\n        style={{\n          backgroundColor: buttonStyle(plant.plantStatus),\n          borderRadius: 5,\n          border: \"none\",\n          outline: \"none\",\n          fontWeight: \"bold\",\n          color: \"white\",\n          width: \"100%\",\n          fontSize: \"20px\",\n          height: \"30px\",\n        }}\n        onClick={() =>\n          buttonClicks(plant.timestamp, plant.id, plant.plantStatus)\n        }\n      >\n        {plant.plantStatus}\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}