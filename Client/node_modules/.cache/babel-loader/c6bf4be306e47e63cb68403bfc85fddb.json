{"ast":null,"code":"var _jsxFileName = \"/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js\";\nimport React, { useState } from \"react\";\nimport { plantUpdated } from './plantsSlice';\nimport planty from \"../../media/plant.png\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nlet clearTimeoutVariable;\nexport default function Plants({\n  plant\n}) {\n  const dispatch = useDispatch();\n\n  const buttonClicks = (time, status, name) => {\n    const time_subtraction = Date.now() - time; // do an enumerate for the status options\n\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: \"Watering\",\n        timestamp: Date.now()\n      })); //   this.setState({\n      //     plantInfo: this.state.plantInfo.map((el) =>\n      //       el.id === id\n      //         ? {\n      //             id: el.id,\n      //             plantName: el.plantName,\n      //             timestamp: Date.now(),\n      //             plantStatus: \"Watering\",\n      //           }\n      //         : el\n      //     ),\n      //   });\n\n      const tenSecondInterval = () => {\n        dispatch(plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: \"Just Watered\",\n          timestamp: Date.now()\n        }));\n\n        const toSetState = () => {\n          dispatch(plantUpdated({\n            id: plant.id,\n            plantName: name,\n            plantStatus: \"Water\",\n            timestamp: Date.now()\n          }));\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: \"Just Watered\",\n        timestamp: Date.now()\n      }));\n\n      const toSetState = () => {\n        dispatch(plantUpdated({\n          id: plant.id,\n          plantName: name,\n          plantStatus: \"Water\",\n          timestamp: Date.now()\n        }));\n      };\n\n      setTimeout(toSetState, 30000);\n    } else {\n      dispatch(plantUpdated({\n        id: plant.id,\n        plantName: name,\n        plantStatus: \"Watering\",\n        timestamp: Date.now()\n      }));\n    }\n  };\n\n  const buttonStyle = status => {\n    if (status === \"Water\") {\n      return \"pink\";\n    } else if (status === \"Watering\") {\n      return \"purple\";\n    } else if (status === \"Must Water\") {\n      return \"red\";\n    } else if (status === \"Just Watered\") {\n      return \"green\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: planty,\n    alt: \"a plant\",\n    style: {\n      width: \"100px\",\n      backgroundColor: \"#faf0e6\",\n      borderRadius: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, plant.plantName), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: buttonStyle(plant.plantStatus),\n      borderRadius: 5,\n      border: \"none\",\n      outline: \"none\",\n      fontWeight: \"bold\",\n      color: \"white\",\n      width: \"100%\",\n      fontSize: \"20px\",\n      height: \"30px\"\n    },\n    onClick: () => buttonClicks(plant.timestamp, plant.plantStatus, plant.plantName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, plant.plantStatus));\n}","map":{"version":3,"sources":["/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/Plants.js"],"names":["React","useState","plantUpdated","planty","useDispatch","useSelector","useHistory","clearTimeoutVariable","Plants","plant","dispatch","buttonClicks","time","status","name","time_subtraction","Date","now","id","plantName","plantStatus","timestamp","tenSecondInterval","toSetState","setTimeout","clearTimeout","buttonStyle","display","flexDirection","alignItems","width","backgroundColor","borderRadius","border","outline","fontWeight","color","fontSize","height"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { plantUpdated } from './plantsSlice'\nimport planty from \"../../media/plant.png\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\n\nlet clearTimeoutVariable\n\n\nexport default function Plants({\n  plant,\n}) {\n\n  const dispatch = useDispatch()\n\n    const buttonClicks = (time, status, name) => {\n\n    const time_subtraction = Date.now() - time;\n    // do an enumerate for the status options\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n        dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Watering\", timestamp: Date.now() }))\n        //   this.setState({\n    //     plantInfo: this.state.plantInfo.map((el) =>\n    //       el.id === id\n    //         ? {\n    //             id: el.id,\n    //             plantName: el.plantName,\n    //             timestamp: Date.now(),\n    //             plantStatus: \"Watering\",\n    //           }\n    //         : el\n    //     ),\n    //   });\n      const tenSecondInterval = () => {\n        dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Just Watered\", timestamp: Date.now() }))\n\n        const toSetState = () => {\n          dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Water\", timestamp: Date.now() }))\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Just Watered\", timestamp: Date.now() }))\n\n\n      const toSetState = () => {\n        dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Water\", timestamp: Date.now() }))\n      };\n      setTimeout(toSetState, 30000);\n    } else {\n      dispatch(plantUpdated({ id: plant.id, plantName: name, plantStatus: \"Watering\", timestamp: Date.now() }))\n    }\n  };\n\n  const buttonStyle = (status) => {\n    if (status === \"Water\") {\n      return \"pink\";\n    } else if (status === \"Watering\") {\n      return \"purple\";\n    } else if (status === \"Must Water\") {\n      return \"red\";\n    } else if (status === \"Just Watered\") {\n      return \"green\";\n    }\n  };\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n    >\n      <img\n        src={planty}\n        alt=\"a plant\"\n        style={{\n          width: \"100px\",\n          backgroundColor: \"#faf0e6\",\n          borderRadius: 10,\n        }}\n      />\n      <h3>{plant.plantName}</h3>\n      <button\n        style={{\n          backgroundColor: buttonStyle(plant.plantStatus),\n          borderRadius: 5,\n          border: \"none\",\n          outline: \"none\",\n          fontWeight: \"bold\",\n          color: \"white\",\n          width: \"100%\",\n          fontSize: \"20px\",\n          height: \"30px\",\n        }}\n        onClick={() =>\n          buttonClicks(plant.timestamp, plant.plantStatus, plant.plantName)\n        }\n      >\n        {plant.plantStatus}\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}