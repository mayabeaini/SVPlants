{"ast":null,"code":"var _jsxFileName = \"/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/PlantsList.js\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport planty from \"../../media/plant.png\";\nimport { useHistory } from 'react-router-dom';\nimport { plantUpdated } from './plantsSlice';\nlet clearTimeoutVariable;\nexport const PlantsList = ({\n  match\n}) => {\n  const plants = useSelector(state => state.plants);\n  const {\n    plantId\n  } = match.params;\n  const plant = useSelector(state => state.plants.find(plant => plant.id === plantId));\n  const [plantName, setPlantName] = useState(plant.plantName);\n  const [plantStatus, setPlantStatus] = useState(plant.plantStatus);\n  const [timestamp, setTimestamp] = useState(plant.timestamp);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const buttonClicks = (time, id, status, name) => {\n    // const aPlant = {\n    //   plantName: \"Plant 1\",\n    //   plantStatus: \"MustWater\",\n    //   timestamp: 1234567890,\n    // };\n    // axios\n    //   .put(\"http://localhost:2238/api/SVPlantItems/1\", aPlant)\n    //   .then((response) => console.log(response));\n    const time_subtraction = Date.now() - time; // do an enumerate for the status options\n\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n      const onPlantNameChanged = setPlantName(name);\n      const onPlantStatusChanged = setPlantStatus(\"Watering\");\n      const onTimestampChanged = setTimestamp(Date.now());\n      dispatch(plantUpdated({\n        id: plantId,\n        plantName: name,\n        plantStatus: \"Watering\",\n        timestamp: Date.now()\n      })); //   this.setState({\n      //     plantInfo: this.state.plantInfo.map((el) =>\n      //       el.id === id\n      //         ? {\n      //             id: el.id,\n      //             plantName: el.plantName,\n      //             timestamp: Date.now(),\n      //             plantStatus: \"Watering\",\n      //           }\n      //         : el\n      //     ),\n      //   });\n\n      const tenSecondInterval = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n            id: el.id,\n            plantName: el.plantName,\n            timestamp: Date.now(),\n            plantStatus: \"Just Watered\"\n          } : el)\n        });\n\n        const toSetState = () => {\n          this.setState({\n            plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n              id: el.id,\n              plantName: el.plantName,\n              timestamp: Date.now(),\n              plantStatus: \"Water\"\n            } : el)\n          });\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      this.setState({\n        plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n          id: el.id,\n          plantName: el.plantName,\n          timestamp: Date.now(),\n          plantStatus: \"Just Watered\"\n        } : el)\n      });\n\n      const toSetState = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n            id: el.id,\n            plantName: el.plantName,\n            timestamp: Date.now(),\n            plantStatus: \"Water\"\n          } : el)\n        });\n      };\n\n      setTimeout(toSetState, 30000);\n    } else {\n      this.setState({\n        plantInfo: this.state.plantInfo.map(el => el.id === id ? {\n          id: el.id,\n          plantName: el.plantName,\n          timestamp: Date.now(),\n          plantStatus: \"Watering\"\n        } : el)\n      });\n    }\n  };\n\n  const renderedPlants = plants.map(plant => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: planty,\n    alt: \"a plant\",\n    style: {\n      width: \"100px\",\n      backgroundColor: \"#faf0e6\",\n      borderRadius: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, plant.plantName), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      // backgroundColor: buttonStyle(plant.plantStatus),\n      borderRadius: 5,\n      border: \"none\",\n      outline: \"none\",\n      fontWeight: \"bold\",\n      color: \"white\",\n      width: \"100%\",\n      fontSize: \"20px\",\n      height: \"30px\"\n    } //   onClick={() =>\n    //     buttonClicks(plant.timestamp, plant.id, plant.plantStatus)\n    //   }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, plant.plantStatus)));\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, \"Plants\"), renderedPlants);\n};","map":{"version":3,"sources":["/Users/mayabeaini/Projects/redux-essentials-example-app-master/src/features/plants/PlantsList.js"],"names":["React","useState","useDispatch","useSelector","planty","useHistory","plantUpdated","clearTimeoutVariable","PlantsList","match","plants","state","plantId","params","plant","find","id","plantName","setPlantName","plantStatus","setPlantStatus","timestamp","setTimestamp","dispatch","history","buttonClicks","time","status","name","time_subtraction","Date","now","onPlantNameChanged","onPlantStatusChanged","onTimestampChanged","tenSecondInterval","setState","plantInfo","map","el","toSetState","setTimeout","clearTimeout","renderedPlants","display","flexDirection","alignItems","width","backgroundColor","borderRadius","border","outline","fontWeight","color","fontSize","height"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport planty from \"../../media/plant.png\";\n\nimport { useHistory } from 'react-router-dom'\n\nimport { plantUpdated } from './plantsSlice'\n\nlet clearTimeoutVariable\nexport const PlantsList = ({match}) => {\n  const plants = useSelector(state => state.plants)\n  const { plantId } = match.params\n\n  const plant = useSelector(state =>\n    state.plants.find(plant => plant.id === plantId)\n  )\n  const [plantName, setPlantName] = useState(plant.plantName)\n  const [plantStatus, setPlantStatus] = useState(plant.plantStatus)\n  const [timestamp, setTimestamp] = useState(plant.timestamp)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n    const buttonClicks = (time, id, status, name) => {\n            // const aPlant = {\n    //   plantName: \"Plant 1\",\n    //   plantStatus: \"MustWater\",\n    //   timestamp: 1234567890,\n    // };\n    // axios\n    //   .put(\"http://localhost:2238/api/SVPlantItems/1\", aPlant)\n    //   .then((response) => console.log(response));\n\n    const time_subtraction = Date.now() - time;\n    // do an enumerate for the status options\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      return null;\n    } else if (status === \"Must Water\" || status === \"Water\") {\n        const onPlantNameChanged = setPlantName(name)\n        const onPlantStatusChanged = setPlantStatus(\"Watering\")\n        const onTimestampChanged = setTimestamp(Date.now())\n        dispatch(plantUpdated({ id: plantId, plantName: name, plantStatus: \"Watering\", timestamp: Date.now() }))\n        //   this.setState({\n    //     plantInfo: this.state.plantInfo.map((el) =>\n    //       el.id === id\n    //         ? {\n    //             id: el.id,\n    //             plantName: el.plantName,\n    //             timestamp: Date.now(),\n    //             plantStatus: \"Watering\",\n    //           }\n    //         : el\n    //     ),\n    //   });\n      const tenSecondInterval = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map((el) =>\n            el.id === id\n              ? {\n                  id: el.id,\n                  plantName: el.plantName,\n                  timestamp: Date.now(),\n                  plantStatus: \"Just Watered\",\n                }\n              : el\n          ),\n        });\n\n        const toSetState = () => {\n          this.setState({\n            plantInfo: this.state.plantInfo.map((el) =>\n              el.id === id\n                ? {\n                    id: el.id,\n                    plantName: el.plantName,\n                    timestamp: Date.now(),\n                    plantStatus: \"Water\",\n                  }\n                : el\n            ),\n          });\n        };\n\n        setTimeout(toSetState, 30000);\n      };\n      clearTimeoutVariable = setTimeout(tenSecondInterval, 10000);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      clearTimeout(clearTimeoutVariable);\n      this.setState({\n        plantInfo: this.state.plantInfo.map((el) =>\n          el.id === id\n            ? {\n                id: el.id,\n                plantName: el.plantName,\n                timestamp: Date.now(),\n                plantStatus: \"Just Watered\",\n              }\n            : el\n        ),\n      });\n\n      const toSetState = () => {\n        this.setState({\n          plantInfo: this.state.plantInfo.map((el) =>\n            el.id === id\n              ? {\n                  id: el.id,\n                  plantName: el.plantName,\n                  timestamp: Date.now(),\n                  plantStatus: \"Water\",\n                }\n              : el\n          ),\n        });\n      };\n      setTimeout(toSetState, 30000);\n    } else {\n      this.setState({\n        plantInfo: this.state.plantInfo.map((el) =>\n          el.id === id\n            ? {\n                id: el.id,\n                plantName: el.plantName,\n                timestamp: Date.now(),\n                plantStatus: \"Watering\",\n              }\n            : el\n        ),\n      });\n    }\n  };\n\n\n  const renderedPlants = plants.map(plant => (\n    <div\n    style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n  >\n    <img\n      src={planty}\n      alt=\"a plant\"\n      style={{\n        width: \"100px\",\n        backgroundColor: \"#faf0e6\",\n        borderRadius: 10,\n      }}\n    />\n    <h3>{plant.plantName}</h3>\n    <button\n      style={{\n        // backgroundColor: buttonStyle(plant.plantStatus),\n        borderRadius: 5,\n        border: \"none\",\n        outline: \"none\",\n        fontWeight: \"bold\",\n        color: \"white\",\n        width: \"100%\",\n        fontSize: \"20px\",\n        height: \"30px\",\n      }}\n    //   onClick={() =>\n    //     buttonClicks(plant.timestamp, plant.id, plant.plantStatus)\n    //   }\n    >\n      {plant.plantStatus}\n    </button>\n  </div>\n\n  ))\n\n  return (\n    <section>\n      <h2>Plants</h2>\n      {renderedPlants}\n    </section>\n  )\n}"]},"metadata":{},"sourceType":"module"}