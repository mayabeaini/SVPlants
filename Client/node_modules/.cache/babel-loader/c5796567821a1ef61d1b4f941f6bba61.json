{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst initialState = {\n  plants: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('plants/fetchPlants', async () => {\n  const response = await client.get('/api/SVPlantItems');\n  return response.plants;\n});\nconst plantsSlice = createSlice({\n  name: 'plants',\n  initialState,\n  reducers: {\n    plantUpdated(state, action) {\n      const {\n        id,\n        plantName,\n        plantStatus,\n        timestamp\n      } = action.payload;\n      const existingPlant = state.find(plant => plant.id === id);\n\n      if (existingPlant) {\n        existingPlant.plantName = plantName;\n        existingPlant.plantStatus = plantStatus;\n        existingPlant.timestamp = timestamp;\n      }\n    }\n\n  }\n});\nexport const {\n  plantUpdated\n} = plantsSlice.actions;\nexport default plantsSlice.reducer;\nexport const selectAllPlants = state => state.plants; // export const selectPlantById = (state, plantId) =>\n//   state.plants.find((plant) => plant.id === plantId)","map":{"version":3,"sources":["/Users/mayabeaini/ShipVistaPlants-MayaBeaini/ShipVistaPlants-MayaBeaini/Client/src/features/plants/plantsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","client","initialState","plants","status","error","fetchPosts","response","get","plantsSlice","name","reducers","plantUpdated","state","action","id","plantName","plantStatus","timestamp","payload","existingPlant","find","plant","actions","reducer","selectAllPlants"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAsD,kBAAtD;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,MAAM,EAAE,MAFW;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,oBAAD,EAAuB,YAAY;AAC3E,QAAMO,QAAQ,GAAG,MAAMN,MAAM,CAACO,GAAP,CAAW,mBAAX,CAAvB;AACA,SAAOD,QAAQ,CAACJ,MAAhB;AACD,CAHyC,CAAnC;AAKP,MAAMM,WAAW,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAE,QADwB;AAE9BR,EAAAA,YAF8B;AAG9BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,SAAN;AAAiBC,QAAAA,WAAjB;AAA8BC,QAAAA;AAA9B,UAA4CJ,MAAM,CAACK,OAAzD;AACA,YAAMC,aAAa,GAAGP,KAAK,CAACQ,IAAN,CAAYC,KAAD,IAAWA,KAAK,CAACP,EAAN,KAAaA,EAAnC,CAAtB;;AACA,UAAIK,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACJ,SAAd,GAA0BA,SAA1B;AACAI,QAAAA,aAAa,CAACH,WAAd,GAA4BA,WAA5B;AACAG,QAAAA,aAAa,CAACF,SAAd,GAA0BA,SAA1B;AACD;AACF;;AATO;AAHoB,CAAD,CAA/B;AAgBA,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAmBH,WAAW,CAACc,OAArC;AACP,eAAed,WAAW,CAACe,OAA3B;AACA,OAAO,MAAMC,eAAe,GAAIZ,KAAD,IAAWA,KAAK,CAACV,MAAzC,C,CAEP;AACA","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nconst initialState = {\n  plants: [],\n  status: 'idle',\n  error: null,\n}\nexport const fetchPosts = createAsyncThunk('plants/fetchPlants', async () => {\n  const response = await client.get('/api/SVPlantItems')\n  return response.plants\n})\n\nconst plantsSlice = createSlice({\n  name: 'plants',\n  initialState,\n  reducers: {\n    plantUpdated(state, action) {\n      const { id, plantName, plantStatus, timestamp } = action.payload\n      const existingPlant = state.find((plant) => plant.id === id)\n      if (existingPlant) {\n        existingPlant.plantName = plantName\n        existingPlant.plantStatus = plantStatus\n        existingPlant.timestamp = timestamp\n      }\n    },\n  },\n})\n\nexport const { plantUpdated } = plantsSlice.actions\nexport default plantsSlice.reducer\nexport const selectAllPlants = (state) => state.plants\n\n// export const selectPlantById = (state, plantId) =>\n//   state.plants.find((plant) => plant.id === plantId)\n"]},"metadata":{},"sourceType":"module"}