{"ast":null,"code":"var _jsxFileName = \"/Users/mayabeaini/ShipVista-MayaBeaini/shipvista-coding/src/pages/Home/Home.jsx\";\nimport React, { Component } from \"react\";\nimport ListOfPlants from \"../../components/ListOfPlants/ListOfPlants\";\nimport StatusBar from \"../../components/StatusBar/StatusBar\"; // import axios from \"axios\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      plantInfo: []\n    };\n\n    this.buttonClicks = (time, id, status) => {\n      const time_subtraction = Date.now() - time; // do an enumerate for the status options\n\n      if (time_subtraction < 30000 && status === \"Just Watered\") {\n        // this.setState((prevState) => ({\n        //   plantInfo: prevState.plantInfo.map((el) =>\n        //     el.id === id ? { ...el, timestamp: Date.now() } : el\n        //   ),\n        return null; // }));\n        // console.log(this.state.plantInfo.find(o=>o.id===id).plantStatus);\n        // console.log(\"Watering\");\n      } else if (plant.plantStatus) {\n        this.setState(prevState => ({\n          plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n            timestamp: Date.now(),\n            plantStatus: \"Watering\"\n          } : el)\n        }));\n\n        const tenSecondInterval = () => {\n          this.setState(prevState => ({\n            plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n              timestamp: Date.now(),\n              plantStatus: \"Just Watered\"\n            } : el)\n          }));\n\n          const toSetState = () => {\n            this.setState(prevState => ({\n              plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n                timestamp: Date.now(),\n                plantStatus: \"Water\"\n              } : el)\n            }));\n          };\n\n          setInterval(toSetState, 30000);\n        };\n\n        setInterval(tenSecondInterval, 10000);\n        console.log(this.state.plantInfo.find(o => o.id === id).plantStatus);\n      } else if (time_subtraction < 10000 && status === \"Watering\") {\n        this.setState(prevState => ({\n          plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n            timestamp: Date.now(),\n            plantStatus: \"Just Watered\"\n          } : el)\n        })); /////////////////////////////////////////////////////////////////////////////\n        // SET INTERVAL SEQUENCE\n\n        const toSetState = () => {\n          this.setState(prevState => ({\n            plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n              timestamp: Date.now(),\n              plantStatus: \"Water\"\n            } : el)\n          }));\n          console.log(this.state.plantInfo.find(o => o.id === id).plantStatus);\n        };\n\n        setInterval(toSetState, 30000);\n        console.log(this.state.plantInfo.find(o => o.id === id).plantStatus); //////////////////////////////////////////////////////////////////////////////////\n      } else {\n        this.setState(prevState => ({\n          plantInfo: prevState.plantInfo.map(el => el.id === id ? { ...el,\n            timestamp: Date.now(),\n            plantStatus: \"Watering\"\n          } : el)\n        })); // console.log(this.state.plantInfo.find((o) => o.id === id).plantStatus);\n        // console.log(\"Water\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      plantInfo: [{\n        timestamp: 1618274087486,\n        plantName: \"Name1\",\n        id: 1,\n        plantStatus: \"Must Water\"\n      }, {\n        timestamp: 1618274087486,\n        plantName: \"Name2\",\n        id: 2,\n        plantStatus: \"Must Water\"\n      }, {\n        timestamp: 1618252487486,\n        plantName: \"Name3\",\n        id: 3,\n        plantStatus: \"Must Water\"\n      }, {\n        timestamp: 1618274087486,\n        plantName: \"Name4\",\n        id: 4,\n        plantStatus: \"Must Water\"\n      }, {\n        timestamp: 1618274087486,\n        plantName: \"Name5\",\n        id: 5,\n        plantStatus: \"Must Water\"\n      }]\n    }); // axios\n    //   .get(\"https://localhost:5001/api/SVPlants\")\n    //   .then((res) =>\n    //     this.setState({\n    //       plantInfo: res.data,\n    //     })\n    //   )\n    //   .catch((err) => console.error(err));\n  }\n\n  // buttonLook = (time, id) => {\n  //   const time_subtraction = Date.now() - time;\n  //   if (time === 1618274087486) {\n  //     return (\n  //       <button\n  //         // disabled\n  //         style={{\n  //           backgroundColor: \"pink\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"20px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Start Watering\n  //       </button>\n  //     );\n  //   } else if (time_subtraction > 21600000) {\n  //     return (\n  //       <button\n  //         style={{\n  //           backgroundColor: \"red\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"13.5px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Start Watering\n  //       </button>\n  //     );\n  //   } else {\n  //     return (\n  //       <button\n  //         style={{\n  //           backgroundColor: \"black\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"20px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Water\n  //       </button>\n  //     );\n  //   }\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StatusBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-evenly\"\n        },\n        children: this.state.plantInfo.map(plant => /*#__PURE__*/_jsxDEV(ListOfPlants, {\n          couler: this.state.couler,\n          buttonLook: this.buttonLook,\n          buttonClicks: this.buttonClicks,\n          plant: plant\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/mayabeaini/ShipVista-MayaBeaini/shipvista-coding/src/pages/Home/Home.jsx"],"names":["React","Component","ListOfPlants","StatusBar","Home","state","plantInfo","buttonClicks","time","id","status","time_subtraction","Date","now","plant","plantStatus","setState","prevState","map","el","timestamp","tenSecondInterval","toSetState","setInterval","console","log","find","o","componentDidMount","plantName","render","display","justifyContent","couler","buttonLook"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ListOfPlants from \"../../components/ListOfPlants/ListOfPlants\";\nimport StatusBar from \"../../components/StatusBar/StatusBar\";\n// import axios from \"axios\";\n\nexport default class Home extends Component {\n  state = {\n    plantInfo: [],\n  };\n  componentDidMount() {\n    this.setState({\n      plantInfo: [\n        {\n          timestamp: 1618274087486,\n          plantName: \"Name1\",\n          id: 1,\n          plantStatus: \"Must Water\",\n        },\n        {\n          timestamp: 1618274087486,\n          plantName: \"Name2\",\n          id: 2,\n          plantStatus: \"Must Water\",\n        },\n        {\n          timestamp: 1618252487486,\n          plantName: \"Name3\",\n          id: 3,\n          plantStatus: \"Must Water\",\n        },\n        {\n          timestamp: 1618274087486,\n          plantName: \"Name4\",\n          id: 4,\n          plantStatus: \"Must Water\",\n        },\n        {\n          timestamp: 1618274087486,\n          plantName: \"Name5\",\n          id: 5,\n          plantStatus: \"Must Water\",\n        },\n      ],\n    });\n    // axios\n    //   .get(\"https://localhost:5001/api/SVPlants\")\n    //   .then((res) =>\n    //     this.setState({\n    //       plantInfo: res.data,\n    //     })\n    //   )\n    //   .catch((err) => console.error(err));\n  }\n  buttonClicks = (time, id, status) => {\n    const time_subtraction = Date.now() - time;\n    // do an enumerate for the status options\n    if (time_subtraction < 30000 && status === \"Just Watered\") {\n      // this.setState((prevState) => ({\n      //   plantInfo: prevState.plantInfo.map((el) =>\n      //     el.id === id ? { ...el, timestamp: Date.now() } : el\n      //   ),\n      return null;\n      // }));\n      // console.log(this.state.plantInfo.find(o=>o.id===id).plantStatus);\n      // console.log(\"Watering\");\n    } else if (plant.plantStatus) {\n      this.setState((prevState) => ({\n        plantInfo: prevState.plantInfo.map((el) =>\n          el.id === id\n            ? { ...el, timestamp: Date.now(), plantStatus: \"Watering\" }\n            : el\n        ),\n      }));\n      const tenSecondInterval = () => {\n        this.setState((prevState) => ({\n          plantInfo: prevState.plantInfo.map((el) =>\n            el.id === id\n              ? { ...el, timestamp: Date.now(), plantStatus: \"Just Watered\" }\n              : el\n          ),\n        }));\n\n        const toSetState = () => {\n          this.setState((prevState) => ({\n            plantInfo: prevState.plantInfo.map((el) =>\n              el.id === id\n                ? { ...el, timestamp: Date.now(), plantStatus: \"Water\" }\n                : el\n            ),\n          }));\n        };\n\n        setInterval(toSetState, 30000);\n      };\n      setInterval(tenSecondInterval, 10000);\n      console.log(this.state.plantInfo.find((o) => o.id === id).plantStatus);\n    } else if (time_subtraction < 10000 && status === \"Watering\") {\n      this.setState((prevState) => ({\n        plantInfo: prevState.plantInfo.map((el) =>\n          el.id === id\n            ? { ...el, timestamp: Date.now(), plantStatus: \"Just Watered\" }\n            : el\n        ),\n      }));\n\n      /////////////////////////////////////////////////////////////////////////////\n      // SET INTERVAL SEQUENCE\n\n      const toSetState = () => {\n        this.setState((prevState) => ({\n          plantInfo: prevState.plantInfo.map((el) =>\n            el.id === id\n              ? { ...el, timestamp: Date.now(), plantStatus: \"Water\" }\n              : el\n          ),\n        }));\n        console.log(this.state.plantInfo.find((o) => o.id === id).plantStatus);\n      };\n      setInterval(toSetState, 30000);\n      console.log(this.state.plantInfo.find((o) => o.id === id).plantStatus);\n      //////////////////////////////////////////////////////////////////////////////////\n    } else {\n      this.setState((prevState) => ({\n        plantInfo: prevState.plantInfo.map((el) =>\n          el.id === id\n            ? { ...el, timestamp: Date.now(), plantStatus: \"Watering\" }\n            : el\n        ),\n      }));\n      // console.log(this.state.plantInfo.find((o) => o.id === id).plantStatus);\n      // console.log(\"Water\");\n    }\n  };\n  // buttonLook = (time, id) => {\n  //   const time_subtraction = Date.now() - time;\n  //   if (time === 1618274087486) {\n  //     return (\n  //       <button\n  //         // disabled\n  //         style={{\n  //           backgroundColor: \"pink\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"20px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Start Watering\n  //       </button>\n  //     );\n  //   } else if (time_subtraction > 21600000) {\n  //     return (\n  //       <button\n  //         style={{\n  //           backgroundColor: \"red\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"13.5px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Start Watering\n  //       </button>\n  //     );\n  //   } else {\n  //     return (\n  //       <button\n  //         style={{\n  //           backgroundColor: \"black\",\n  //           borderRadius: 5,\n  //           border: \"none\",\n  //           outline: \"none\",\n  //           fontWeight: \"bold\",\n  //           color: \"white\",\n  //           width: \"100%\",\n  //           fontSize: \"20px\",\n  //           height: \"30px\",\n  //         }}\n  //         onClick={() => this.buttonClicks(time, id)}\n  //       >\n  //         Water\n  //       </button>\n  //     );\n  //   }\n  // };\n\n  render() {\n    return (\n      <div>\n        <StatusBar />\n        <div style={{ display: \"flex\", justifyContent: \"space-evenly\" }}>\n          {this.state.plantInfo.map((plant) => (\n            <ListOfPlants\n              couler={this.state.couler}\n              buttonLook={this.buttonLook}\n              buttonClicks={this.buttonClicks}\n              plant={plant}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}